public int findKth(int[] A, int a_start, int[] B, int b_start, int k){
        if(a_start >= A.length)
            return B[b_start + k -1];
        if(b_start >= B.length)
            return A[a_start + k -1];
        if(k == 1)
            return Math.min(A[a_start], B[b_start]);
        int A_key = a_start + k/2 -1 < A.length ? A[a_start + k/2 -1]: Integer.MAX_VALUE;
        int B_key = b_start + k/2 -1 < B.length ? B[b_start + k/2 -1]: Integer.MAX_VALUE;
        if(A_key < B_key){
            return findKth(A, a_start+ k/2, B, b_start, k-k/2);
        }
        else{
            return findKth(A, a_start, B, b_start + k/2, k -k/2);
        }
        
    }
    
    public double findMedianSortedArrays(int[] A, int[] B) {
        int len = A.length + B.length;
        if(len % 2 == 1)
            return findKth(A,0,B,0, len/2 + 1);
        else
            return (findKth(A,0,B,0, len/2) + findKth(A, 0,B, 0,len/2 + 1))/2.0;
    }
}
